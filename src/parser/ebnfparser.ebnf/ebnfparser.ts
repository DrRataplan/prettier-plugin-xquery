// This file was generated on Sat May 24, 2025 14:39 (UTC+02) by REx v6.1 which is Copyright (c) 1979-2025 by Gunther Rademacher <grd@gmx.net>
// REx command line: REx.ebnf -lr 3 -typescript -tree

  export interface ParsingEventHandler
  {
    reset(source: string): void;
    startNonterminal(name: string, begin: number): void;
    endNonterminal(name: string, end: number): void;
    terminal(name: string, begin: number, end: number): void;
    whitespace(begin: number, end: number): void;
  }

  export interface BottomUpEventHandler
  {
    reset(input: string): void;
    nonterminal(name: string, begin: number, end: number, count: number): void;
    terminal(name: string, begin: number, end: number): void;
  }

  export class ParseException
  {
    private begin: number;
    private end: number;
    private state: number;
    private offending: number;
    private expected: number;

    constructor(b: number, e: number, s: number, o: number, x: number)
    {
      this.begin = b;
      this.end = e;
      this.state = s;
      this.offending = o;
      this.expected = x;
    }

    getBegin() {return this.begin;}
    getEnd() {return this.end;}
    getState() {return this.state;}
    getExpected() {return this.expected;}
    getOffending() {return this.offending;}
    isAmbiguousInput() {return false;}

    getMessage()
    {
      return this.offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }
  }

  interface Memoizer
  {
    [index: number]: number;
  }

  export class Parser
  {
    constructor(source: string, parsingEventHandler: BottomUpEventHandler)
    {
      this.initialize(source, parsingEventHandler);
    }

    initialize(source: string, parsingEventHandler: BottomUpEventHandler)
    {
      this.eventHandler = parsingEventHandler;
      this.input = source;
      this.size = source.length;
      this.reset(0, 0, 0);
    }

    getInput()
    {
      return this.input;
    }

    getTokenOffset()
    {
      return this.b0;
    }

    getTokenEnd()
    {
      return this.e0;
    }

    private reset(l: number, b: number, e: number)
    {
                   this.b0 = b; this.e0 = b;
      this.l1 = l; this.b1 = b; this.e1 = e;
      this.l2 = 0; this.b2 = 0; this.e2 = 0;
      this.l3 = 0; this.b3 = 0; this.e3 = 0;
      this.end = e;
      this.eventHandler.reset(this.input);
    }

    getOffendingToken(e: ParseException)
    {
      var o = e.getOffending();
      return o >= 0 ? Parser.TOKEN[o] : null;
    }

    getExpectedTokenSet(e: ParseException)
    {
      var expected: string[];
      if (e.getExpected() < 0)
      {
        expected = Parser.getTokenSet(- e.getState());
      }
      else
      {
        expected = [Parser.TOKEN[e.getExpected()]];
      }
      return expected;
    }

    getErrorMessage(e: ParseException)
    {
      var message = e.getMessage();
      var found = this.getOffendingToken(e);
      var tokenSet = this.getExpectedTokenSet(e);
      var size = e.getEnd() - e.getBegin();
      message += (found == null ? "" : ", found " + found)
              + "\nwhile expecting "
              + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
              + "\n"
              + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
      var prefix = this.input.substring(0, e.getBegin());
      var lines = prefix.split("\n");
      var line = lines.length;
      var column = lines[line - 1].length + 1;
      return message
           + "at line " + line + ", column " + column + ":\n..."
           + this.input.substring(e.getBegin(), Math.min(this.input.length, e.getBegin() + 64))
           + "...";
    }

    parse_Grammar()
    {
      this.top = -1;
      this.parse(0, 26, this.eventHandler);
    }

    private push(state: number, lookback: number, begin: number)
    {
      this.top += 3;
      this.iStack[this.top - 2] = begin;
      this.iStack[this.top - 1] = state;
      this.iStack[this.top] = lookback;
    }

    private lookback(x: number, y: number)
    {
      var i = Parser.LOOKBACK[y];
      var l = Parser.LOOKBACK[i];
      while (l > x)
      {
        i += 2;
        l = Parser.LOOKBACK[i];
      }
      if (l < x)
      {
        return 0;
      }
      else
      {
        return Parser.LOOKBACK[i + 1];
      }
    }

    private count(code: number)
    {
      var count = 0;
      for (var t = this.top; t >= 0; t -= 3)
      {
        code = this.lookback(this.iStack[t], code);
        if (code == 0)
        {
          break;
        }
        count += 1;
      }
      return count;
    }

    private parse(target: number, initialState: number, eventHandler: BottomUpEventHandler)
    {
      var state = initialState;
      var bw = this.e0;
      var bs = this.e0;
      var es = this.e0;
      var t = this.top;
      var action = this.predict(state);
      var nonterminalId = -1;
      for (;;)
      {
        var argument = action >> 12;
        var lookback = (action >> 3) & 511;
        var shift = -1;
        var reduce = -1;
        var symbols = -1;
        switch (action & 7)
        {
        case 1: // SHIFT
          shift = argument;
          break;

        case 2: // REDUCE
          reduce = argument;
          symbols = lookback;
          break;

        case 3: // REDUCE+LOOKBACK
          reduce = argument;
          symbols = this.count(lookback);
          break;

        case 4: // SHIFT+REDUCE
          shift = state;
          reduce = argument;
          symbols = lookback + 1;
          break;

        case 5: // SHIFT+REDUCE+LOOKBACK
          shift = state;
          reduce = argument;
          symbols = this.count(lookback) + 1;
          break;

        case 6: // ACCEPT
          return;

        default: // ERROR
          throw new ParseException(this.b1, this.e1, Parser.TOKENSET[state] + 1, this.l1, -1);
        }

        if (shift >= 0)
        {
          if (nonterminalId < 0)
          {
            if (eventHandler != null)
            {
              eventHandler.terminal(Parser.TOKEN[this.l1], this.b1, this.e1);
            }
            es = this.e1;
            this.push(state, lookback, this.b1);
            this.consume(this.l1);
          }
          else
          {
            this.push(state, lookback, bs);
          }
          state = shift;
        }

        if (reduce < 0)
        {
          action = this.predict(state);
          nonterminalId = -1;
        }
        else
        {
          nonterminalId = reduce;
          if (symbols > 0)
          {
            this.top -= symbols * 3;
            state = this.iStack[this.top + 2];
            bs = this.iStack[this.top + 1];
          }
          else
          {
            bs = this.b1;
            es = this.b1;
          }
          if (nonterminalId == target && t == this.top)
          {
            bs = bw;
            es = this.b1;
            bw = this.b1;
          }
          if (eventHandler != null)
          {
            eventHandler.nonterminal(Parser.NONTERMINAL[nonterminalId], bs, es, symbols);
          }
          action = Parser.goTo(nonterminalId, state);
        }
      }
    }

    private consume(t: number)
    {
      if (this.l1 == t)
      {
        this.b0 = this.b1; this.e0 = this.e1; this.l1 = this.l2; if (this.l1 != 0) {
        this.b1 = this.b2; this.e1 = this.e2; this.l2 = this.l3; if (this.l2 != 0) {
        this.b2 = this.b3; this.e2 = this.e3; this.l3 = 0; }}
      }
      else
      {
        this.error(this.b1, this.e1, 0, this.l1, t);
      }
    }

    private matchW(tokenSetId: number)
    {
      var code: number;
      for (;;)
      {
        code = this.match(tokenSetId);
        if (code != 1)              // Whitespace
        {
          break;
        }
      }
      return code;
    }

    private error(b: number, e: number, s: number, l: number, t: number)
    {
      throw new ParseException(b, e, s, l, t);
    }

                        private b0: number; private e0: number;
    private l1: number; private b1: number; private e1: number;
    private l2: number; private b2: number; private e2: number;
    private l3: number; private b3: number; private e3: number;
    private iStack: number[] = [];
    private top: number = -1;
    private eventHandler: BottomUpEventHandler;

    private input: string;
    private size: number;
    private begin: number;
    private end: number;

    private predict(dpi: number): number
    {
      var d = dpi;
      if (this.l1 == 0)
      {
        this.l1 = this.matchW(Parser.TOKENSET[d]);
        this.b1 = this.begin;
        this.e1 = this.end;
      }
      for (;; ++d)
      {
        var j10 = (d << 6) + this.l1;
        var j11 = j10 >> 2;
        var action = Parser.CASEID[(j10 & 3) + Parser.CASEID[(j11 & 3) + Parser.CASEID[j11 >> 2]]];
        if ((action & 1) == 0)
          return action >> 1;
        if (this.l2 == 0)
        {
          this.l2 = this.matchW(action >> 1);
          this.b2 = this.begin;
          this.e2 = this.end;
        }
        var i20 = 48 * this.l2 + this.l1;
        var i21 = i20 >> 3;
        var matchCode = Parser.LOOKAHEAD[(i20 & 7) + Parser.LOOKAHEAD[(i21 & 7) + Parser.LOOKAHEAD[i21 >> 3]]];
        if (matchCode != 0)
        {
          var j20 = (d << 6) + matchCode;
          var j21 = j20 >> 2;
          action = Parser.CASEID[(j20 & 3) + Parser.CASEID[(j21 & 3) + Parser.CASEID[j21 >> 2]]];
          if (action != 0)
          {
            if ((action & 1) == 0)
              return action >> 1;
            if (this.l3 == 0)
            {
              this.l3 = this.matchW(action >> 1);
              this.b3 = this.begin;
              this.e3 = this.end;
            }
            var i30 = 48 * this.l3 + matchCode;
            var i31 = i30 >> 3;
            matchCode = Parser.LOOKAHEAD[(i30 & 7) + Parser.LOOKAHEAD[(i31 & 7) + Parser.LOOKAHEAD[i31 >> 3]]];
            if (matchCode != 0)
            {
              var j30 = (d << 6) + matchCode;
              var j31 = j30 >> 2;
              action = Parser.CASEID[(j30 & 3) + Parser.CASEID[(j31 & 3) + Parser.CASEID[j31 >> 2]]];
              if (action != 0)
              {
                return action >> 1;
              }
            }
          }
        }
      }
    }

    private match(tokenSetId: number): number
    {
      var nonbmp = false;
      this.begin = this.end;
      var current = this.end;
      var result = Parser.INITIAL[tokenSetId];
      var state = 0;
      for (var code = result & 255; code != 0; )
      {
        var charclass: number;
        var c0 = current < this.size ? this.input.charCodeAt(current) : 0;
        ++current;
        if (c0 < 0x80)
        {
          charclass = Parser.MAP0[c0];
        }
        else if (c0 < 0xd800)
        {
          var c1 = c0 >> 4;
          charclass = Parser.MAP1[(c0 & 15) + Parser.MAP1[(c1 & 31) + Parser.MAP1[c1 >> 5]]];
        }
        else
        {
          if (c0 < 0xdc00)
          {
            var c1: number = current < this.size ? this.input.charCodeAt(current) : 0;
            if (c1 >= 0xdc00 && c1 < 0xe000)
            {
              ++current;
              c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
              nonbmp = true;
            }
          }

          var lo = 0, hi = 5;
          for (var m = 3; ; m = (hi + lo) >> 1)
          {
            if (Parser.MAP2[m] > c0) hi = m - 1;
            else if (Parser.MAP2[6 + m] < c0) lo = m + 1;
            else {charclass = Parser.MAP2[12 + m]; break;}
            if (lo > hi) {charclass = 0; break;}
          }
        }

        state = code;
        var i0 = (charclass << 8) + code - 1;
        code = Parser.TRANSITION[(i0 & 7) + Parser.TRANSITION[i0 >> 3]];

        if (code > 255)
        {
          result = code;
          code &= 255;
          this.end = current;
        }
      }

      result >>= 8;
      if (result == 0)
      {
        this.end = current - 1;
        var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
        this.error(this.begin, this.end, state, -1, -1);
      }

      if ((result & 64) != 0)
      {
        this.end = this.begin;
        if (nonbmp)
        {
          for (var i = result >> 7; i > 0; --i)
          {
            var c1: number = this.end < this.size ? this.input.charCodeAt(this.end++) : 0;
            if (c1 >= 0xd800 && c1 < 0xdc00) ++this.end;
          }
        }
        else
        {
          this.end += (result >> 7);
        }
      }
      else
      {
        if (nonbmp)
        {
          for (var i = result >> 7; i > 0; --i)
          {
            --this.end;
            var c1: number = this.end < this.size ? this.input.charCodeAt(this.end) : 0;
            if (c1 >= 0xdc00 && c1 < 0xe000) --this.end;
          }
        }
        else
        {
          this.end -= result >> 7;
        }
      }

      if (this.end > this.size) this.end = this.size;
      return (result & 63) - 1;
    }

    private static goTo(nonterminal: number, state: number): number
    {
      var i0 = 24 * state + nonterminal;
      var i1 = i0 >> 2;
      return Parser.GOTO[(i0 & 3) + Parser.GOTO[(i1 & 3) + Parser.GOTO[i1 >> 2]]];
    }

    private static getTokenSet(tokenSetId: number)
    {
      var set: string[] = [];
      var s = tokenSetId < 0 ? - tokenSetId : Parser.INITIAL[tokenSetId] & 255;
      for (var i = 0; i < 38; i += 32)
      {
        var j = i;
        var i0 = (i >> 5) * 182 + s - 1;
        var i1 = i0 >> 2;
        var f = Parser.EXPECTED[(i0 & 3) + Parser.EXPECTED[(i1 & 15) + Parser.EXPECTED[i1 >> 4]]];
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            set.push(Parser.TOKEN[j]);
          }
        }
      }
      return set;
    }

    private static MAP0: number[] =
    [
      /*   0 */ 50, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5,
      /*  35 */ 6, 7, 4, 8, 9, 10, 11, 12, 13, 4, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21,
      /*  63 */ 22, 4, 23, 23, 23, 23, 24, 23, 25, 25, 25, 25, 26, 25, 25, 27, 28, 25, 25, 25, 29, 30, 25, 25, 25, 25, 25,
      /*  90 */ 25, 31, 32, 33, 34, 25, 4, 23, 23, 35, 36, 37, 38, 25, 25, 39, 25, 25, 40, 25, 41, 42, 43, 25, 25, 44, 45,
      /* 117 */ 25, 25, 46, 47, 25, 25, 4, 48, 4, 4, 4
    ];

    private static MAP1: number[] =
    [
      /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
      /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
      /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 325, 371, 387, 424, 424, 424, 416, 355, 347, 355, 347, 355, 355,
      /* 126 */ 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 441, 441, 441, 441, 441, 441, 441,
      /* 147 */ 340, 355, 355, 355, 355, 355, 355, 355, 355, 400, 424, 424, 425, 423, 424, 424, 355, 355, 355, 355, 355,
      /* 168 */ 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 424, 424, 424, 424, 424, 424, 424, 424,
      /* 189 */ 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
      /* 210 */ 424, 424, 424, 354, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
      /* 231 */ 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 424, 50, 0, 0, 0, 0, 0, 0, 0,
      /* 255 */ 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13,
      /* 289 */ 4, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21, 22, 4, 23, 23, 23, 23, 24, 23,
      /* 316 */ 25, 25, 25, 25, 26, 25, 25, 27, 28, 25, 25, 25, 29, 30, 25, 25, 25, 25, 25, 25, 31, 32, 33, 34, 25, 25,
      /* 342 */ 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 4, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
      /* 369 */ 25, 25, 4, 23, 23, 35, 36, 37, 38, 25, 25, 39, 25, 25, 40, 25, 41, 42, 43, 25, 25, 44, 45, 25, 25, 46, 47,
      /* 396 */ 25, 25, 4, 48, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 25, 25, 4, 4, 4, 4, 4, 4, 4, 4, 4, 49, 4, 4, 4, 4, 4,
      /* 429 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49
    ];

    private static MAP2: number[] =
    [
      /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 4, 25, 4, 25, 25,
      /* 17 */ 4
    ];

    private static INITIAL: number[] =
    [
      /*  0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
      /* 29 */ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
      /* 56 */ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75
    ];

    private static TRANSITION: number[] =
    [
      /*    0 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*   17 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2396, 1632,
      /*   34 */ 1641, 1633, 1633, 1633, 1633, 1633, 1633, 1745, 2403, 1714, 3317, 2538, 2447, 1780, 2167, 3112, 1656,
      /*   51 */ 1666, 2068, 1699, 1727, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2182, 1741, 2189, 1633,
      /*   68 */ 1633, 1633, 1633, 1633, 1633, 1745, 2404, 1714, 2144, 2538, 2236, 1757, 2743, 1774, 1792, 2484, 2121,
      /*   85 */ 1810, 1823, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2396, 1632, 1837, 1633, 1633, 1633,
      /*  102 */ 1633, 1633, 1633, 1745, 1845, 2149, 2514, 2589, 3279, 1780, 2167, 3112, 1656, 1666, 2068, 1699, 1727,
      /*  119 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2788, 2404, 2404, 2404, 2404, 2404,
      /*  136 */ 2404, 2404, 3062, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404,
      /*  153 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 1885, 3239, 1896, 1899, 1901, 1901, 1901, 1901, 1909,
      /*  170 */ 3150, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404,
      /*  187 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 1784, 2404, 2854, 2404, 1927, 2855, 1920, 1925, 3062, 1850,
      /*  204 */ 3259, 2589, 3279, 3353, 2592, 2469, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  221 */ 2404, 2404, 2404, 2404, 2404, 2788, 2404, 2626, 2404, 1942, 2627, 1935, 1940, 3062, 2149, 3057, 2589,
      /*  238 */ 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  255 */ 2404, 2404, 2404, 2788, 2404, 2404, 1963, 2404, 1950, 1956, 1961, 3062, 2149, 3057, 2589, 3279, 3109,
      /*  272 */ 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  289 */ 1972, 2886, 1985, 1988, 1990, 1990, 1990, 1990, 1998, 2086, 2149, 3057, 2589, 3279, 3109, 2592, 1860,
      /*  306 */ 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2788,
      /*  323 */ 2026, 3376, 2016, 2012, 2016, 2017, 2025, 3062, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170,
      /*  340 */ 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 3322, 3327, 2948, 2034, 2404,
      /*  357 */ 2039, 3332, 3206, 3330, 2404, 3062, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699,
      /*  374 */ 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2405, 2404, 2788, 1704, 2404, 3009, 2047,
      /*  391 */ 3011, 2076, 2081, 3062, 3067, 1686, 2607, 2099, 2612, 2107, 2131, 2129, 2061, 2054, 2139, 2157, 2404,
      /*  408 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2788, 1709, 2404, 3034, 2175, 3036, 2197,
      /*  425 */ 2202, 3062, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404,
      /*  442 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2788, 2404, 2404, 2404, 2771, 2404, 2213, 2217, 3062,
      /*  459 */ 2351, 3057, 2229, 2247, 3109, 2418, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404,
      /*  476 */ 2404, 2404, 2404, 2404, 2404, 2404, 3181, 2278, 2269, 2255, 2264, 2277, 2286, 2291, 3062, 2149, 3057,
      /*  493 */ 2303, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  510 */ 2404, 2404, 1733, 3294, 3420, 2330, 2315, 2323, 3301, 2338, 3307, 3312, 2346, 2519, 2969, 2589, 1648,
      /*  527 */ 2359, 2371, 2381, 2379, 2389, 2574, 2413, 2426, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  544 */ 2404, 2404, 2788, 2404, 2404, 2404, 2404, 2404, 2404, 2652, 3062, 1888, 3057, 2440, 2458, 2466, 2974,
      /*  561 */ 1860, 2477, 3170, 2551, 2508, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2527, 2450,
      /*  578 */ 2788, 2404, 2536, 2404, 2528, 1874, 1829, 1877, 3062, 2149, 3057, 2589, 3279, 2696, 2592, 1860, 2546,
      /*  595 */ 3051, 2569, 1699, 2564, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 1691, 2582, 2163,
      /*  612 */ 2600, 2624, 2432, 2635, 1964, 2649, 3264, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797,
      /*  629 */ 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2239, 2404, 2788, 2404, 2404, 2404,
      /*  646 */ 2404, 2404, 2404, 1766, 3062, 2149, 2713, 2589, 3279, 2660, 3221, 2699, 1858, 2671, 2837, 2691, 2707,
      /*  663 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2256, 2731, 2404, 2727, 2404, 1749, 2404,
      /*  680 */ 2256, 2739, 3155, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 2751, 1868, 2404, 2404,
      /*  697 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 1975, 2788, 1977, 2769, 3135, 3136, 3137, 2779, 2784,
      /*  714 */ 2091, 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 2556, 1699, 1868, 2404, 2404, 2404, 2404,
      /*  731 */ 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2803,
      /*  748 */ 3057, 2440, 2458, 2466, 2974, 1860, 2477, 3170, 2551, 2508, 1868, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  765 */ 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2803, 3057, 2440,
      /*  782 */ 2458, 2466, 2974, 2796, 2477, 3170, 2551, 2508, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /*  799 */ 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 3109,
      /*  816 */ 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220,
      /*  833 */ 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 2491, 2592, 1860,
      /*  850 */ 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295,
      /*  867 */ 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 3109, 2592, 1860, 2832, 3170,
      /*  884 */ 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992,
      /*  901 */ 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 2845, 3109, 2592, 1860, 1858, 3170, 1797, 1699,
      /*  918 */ 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994,
      /*  935 */ 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 3109, 2592, 1860, 1858, 3196, 1797, 1699, 1868, 2404,
      /*  952 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994,
      /*  969 */ 2963, 3062, 2810, 2719, 2303, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404,
      /*  986 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 3235, 2898, 2001, 2004, 2853, 2863, 2871, 2877, 2882, 3062,
      /* 1003 */ 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404,
      /* 1020 */ 2404, 2404, 2404, 2404, 2404, 2404, 2788, 2404, 1764, 2404, 1761, 2404, 2404, 2894, 3062, 1815, 3057,
      /* 1037 */ 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1054 */ 2404, 2404, 2906, 2404, 1912, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 3062, 1714, 2307, 2363, 2447,
      /* 1071 */ 3109, 2923, 1860, 1858, 3170, 1797, 2918, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1088 */ 2404, 2404, 2935, 2910, 2931, 2500, 1719, 2758, 2908, 2761, 3062, 2149, 2943, 2589, 3279, 3109, 2592,
      /* 1105 */ 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221,
      /* 1122 */ 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2803, 3057, 2440, 2458, 2466, 2974, 3228, 2477,
      /* 1139 */ 3170, 2551, 2508, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2956, 2989,
      /* 1156 */ 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2803, 3057, 2440, 2458, 2466, 2974, 1860, 2477, 3170, 2551,
      /* 1173 */ 2508, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2982, 2989, 2992, 2994,
      /* 1190 */ 2994, 2994, 2994, 2963, 3062, 3002, 3057, 2440, 2458, 2466, 2974, 1860, 2477, 3170, 2551, 2508, 1868,
      /* 1207 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994,
      /* 1224 */ 2994, 2963, 3062, 2803, 2641, 2440, 2458, 2466, 2974, 1860, 2477, 3170, 2551, 2508, 1868, 2404, 2404,
      /* 1241 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963,
      /* 1258 */ 3062, 2810, 3057, 2303, 3019, 1673, 2592, 3027, 3044, 3170, 3075, 1699, 1868, 2404, 2404, 2404, 2404,
      /* 1275 */ 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810,
      /* 1292 */ 3057, 2303, 3088, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1309 */ 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303,
      /* 1326 */ 3279, 1680, 2592, 1860, 1858, 3170, 1797, 3096, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1343 */ 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 3109,
      /* 1360 */ 2592, 1860, 1858, 3170, 1802, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220,
      /* 1377 */ 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 3104, 3279, 3109, 2592, 1860,
      /* 1394 */ 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295,
      /* 1411 */ 2989, 2992, 2994, 2994, 2994, 2994, 2963, 2678, 2810, 3057, 2303, 3120, 3109, 2592, 1658, 1858, 3128,
      /* 1428 */ 1797, 3145, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992,
      /* 1445 */ 2994, 2994, 2994, 2994, 2963, 3062, 2810, 3057, 2303, 3279, 3109, 2592, 1860, 3163, 3170, 3189, 1699,
      /* 1462 */ 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 3204, 2295, 2989, 2992, 2994, 2994,
      /* 1479 */ 2994, 2994, 2963, 3062, 2810, 3253, 2303, 3279, 3177, 2616, 2663, 1858, 3170, 3080, 1699, 1868, 2404,
      /* 1496 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2220, 2221, 2295, 2989, 2992, 2994, 2994, 2994, 2994,
      /* 1513 */ 2963, 3062, 3214, 3247, 3272, 3279, 3109, 2592, 2114, 1858, 3287, 1797, 1699, 1868, 2404, 2404, 2404,
      /* 1530 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2205, 2683, 3340, 3347, 3367, 3361, 3384, 3387, 3372, 3062,
      /* 1547 */ 2149, 3057, 2589, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404,
      /* 1564 */ 2404, 2404, 2404, 2404, 2404, 2404, 2788, 2404, 2404, 2404, 2404, 2404, 2404, 2652, 3062, 2149, 3057,
      /* 1581 */ 2303, 3279, 3109, 2592, 1860, 1858, 3170, 1797, 1699, 1868, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1598 */ 2404, 2404, 2496, 2496, 3395, 2817, 3400, 3405, 2824, 3413, 2823, 3404, 2404, 2404, 2404, 2404, 2404,
      /* 1615 */ 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
      /* 1632 */ 849, 588, 588, 588, 588, 588, 588, 588, 588, 849, 588, 588, 588, 0, 588, 0, 588, 112, 627, 0, 0, 0, 0,
      /* 1655 */ 129, 112, 658, 659, 0, 0, 0, 0, 152, 143, 0, 152, 152, 143, 143, 0, 112, 671, 0, 0, 112, 646, 0, 0, 140,
      /* 1680 */ 0, 0, 112, 646, 0, 139, 0, 0, 109, 113, 613, 0, 0, 0, 86, 0, 0, 0, 87, 169, 169, 169, 169, 169, 0, 0, 0,
      /* 1707 */ 0, 6912, 0, 0, 0, 0, 7168, 0, 0, 0, 0, 34048, 0, 0, 0, 0, 5723, 5723, 5723, 0, 152, 152, 179, 180, 152,
      /* 1732 */ 182, 0, 0, 77, 77, 77, 77, 77, 0, 768, 588, 588, 588, 588, 588, 588, 588, 0, 0, 0, 0, 88, 0, 0, 0, 121,
      /* 1758 */ 0, 123, 645, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 3584, 658, 0, 0, 0, 0, 142, 121, 0, 123, 636, 0, 0, 0,
      /* 1787 */ 0, 93, 0, 93, 0, 112, 658, 671, 0, 0, 0, 0, 152, 169, 0, 0, 0, 152, 169, 0, 0, 176, 152, 179, 179, 179,
      /* 1813 */ 179, 179, 0, 0, 0, 0, 34048, 0, 109, 4352, 152, 152, 179, 182, 152, 182, 0, 0, 79, 0, 0, 79, 79, 0, 849,
      /* 1838 */ 588, 588, 588, 1372, 588, 1372, 588, 849, 0, 0, 84, 85, 0, 0, 0, 0, 34048, 0, 110, 0, 112, 112, 646, 0,
      /* 1862 */ 0, 0, 0, 152, 143, 0, 152, 152, 152, 169, 152, 152, 0, 0, 79, 0, 79, 79, 0, 0, 0, 102, 0, 0, 84, 84, 0,
      /* 1889 */ 0, 0, 0, 0, 0, 109, 0, 84, 84, 0, 0, 0, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 0, 0, 0, 0, 0, 0,
      /* 1918 */ 4608, 0, 97, 97, 97, 97, 97, 97, 97, 97, 0, 0, 0, 0, 0, 0, 97, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
      /* 1942 */ 2048, 0, 0, 0, 0, 0, 0, 2048, 6400, 0, 0, 0, 0, 0, 6400, 0, 6400, 6400, 6400, 6400, 6400, 6400, 0, 0, 0,
      /* 1967 */ 0, 0, 0, 0, 87, 0, 85, 85, 0, 0, 0, 0, 0, 0, 8704, 0, 0, 0, 85, 85, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85,
      /* 1997 */ 85, 85, 85, 85, 0, 0, 0, 0, 0, 95, 95, 0, 0, 95, 3938, 2304, 0, 2304, 2304, 0, 2304, 2304, 2304, 2304,
      /* 2021 */ 2304, 2304, 2304, 2304, 2304, 2304, 2304, 0, 0, 0, 0, 0, 2304, 6656, 6656, 0, 0, 6656, 0, 0, 6656, 6656,
      /* 2043 */ 6656, 6656, 6656, 6656, 0, 6912, 6912, 6912, 0, 6912, 6912, 0, 0, 153, 170, 0, 0, 0, 153, 153, 164, 143,
      /* 2065 */ 0, 113, 113, 0, 0, 163, 164, 0, 0, 0, 168, 0, 6912, 0, 6912, 6912, 6912, 6912, 6912, 0, 100, 0, 0, 0, 84,
      /* 2090 */ 9472, 0, 0, 0, 84, 85, 103, 0, 0, 113, 113, 636, 0, 0, 0, 0, 129, 0, 142, 0, 0, 113, 647, 647, 646, 0, 0,
      /* 2117 */ 0, 151, 152, 143, 0, 0, 163, 168, 0, 0, 0, 168, 158, 113, 647, 0, 0, 0, 0, 153, 143, 0, 170, 170, 169,
      /* 2142 */ 170, 170, 0, 0, 0, 100, 588, 0, 0, 0, 0, 34048, 0, 109, 0, 181, 153, 153, 170, 153, 153, 0, 0, 86, 86, 0,
      /* 2168 */ 0, 0, 0, 645, 646, 646, 646, 0, 7168, 7168, 7168, 0, 7168, 7168, 0, 0, 588, 588, 588, 588, 588, 768, 588,
      /* 2191 */ 588, 588, 0, 588, 0, 588, 0, 7168, 0, 7168, 7168, 7168, 7168, 7168, 0, 0, 0, 0, 0, 8960, 0, 0, 2816,
      /* 2214 */ 2816, 2816, 0, 2816, 0, 2816, 0, 0, 9294, 0, 0, 0, 0, 0, 0, 0, 5738, 1536, 0, 120, 120, 0, 112, 112, 588,
      /* 2239 */ 0, 0, 0, 0, 0, 0, 80, 0, 112, 112, 613, 0, 0, 0, 128, 129, 9728, 0, 0, 0, 0, 0, 0, 0, 88, 9728, 9728, 0,
      /* 2267 */ 0, 9728, 0, 0, 9728, 9728, 0, 0, 9728, 9728, 9728, 0, 0, 0, 0, 0, 9728, 9728, 0, 9728, 9728, 9728, 9728,
      /* 2290 */ 9728, 9728, 9728, 9728, 0, 0, 9294, 0, 0, 1372, 9294, 1372, 9294, 0, 5738, 1536, 0, 0, 0, 0, 112, 613, 0,
      /* 2313 */ 0, 0, 7518, 77, 94, 77, 7518, 94, 77, 77, 94, 7518, 7501, 77, 7501, 77, 7501, 7501, 77, 7518, 94, 77, 77,
      /* 2336 */ 94, 7501, 94, 7518, 7518, 7518, 94, 7518, 94, 77, 0, 2560, 0, 84, 85, 0, 0, 0, 107, 34155, 0, 109, 0,
      /* 2359 */ 130, 0, 112, 648, 0, 0, 0, 0, 121, 121, 0, 112, 0, 143, 0, 0, 145, 648, 627, 648, 646, 145, 648, 0, 0, 0,
      /* 2385 */ 0, 152, 155, 0, 121, 152, 155, 155, 0, 658, 145, 0, 0, 588, 588, 588, 588, 588, 849, 0, 0, 0, 0, 0, 0, 0,
      /* 2411 */ 0, 82, 171, 155, 171, 171, 171, 0, 0, 0, 144, 112, 646, 646, 646, 169, 152, 177, 171, 179, 177, 0, 0, 86,
      /* 2435 */ 86, 87, 86, 86, 0, 0, 5738, 1536, 1143, 0, 0, 1135, 112, 112, 613, 0, 0, 0, 0, 0, 0, 79, 0, 112, 112,
      /* 2460 */ 613, 0, 0, 0, 1143, 129, 0, 132, 112, 646, 0, 0, 0, 0, 152, 143, 157, 112, 112, 646, 0, 0, 0, 1943, 152,
      /* 2485 */ 152, 121, 121, 0, 112, 671, 0, 0, 112, 646, 138, 0, 0, 0, 5888, 0, 0, 0, 0, 5723, 5723, 0, 5723, 169,
      /* 2509 */ 169, 169, 169, 169, 174, 0, 0, 109, 100, 613, 0, 0, 0, 0, 34048, 613, 109, 0, 3072, 0, 0, 0, 0, 79, 0, 0,
      /* 2535 */ 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 613, 0, 0, 0, 0, 152, 169, 174, 0, 0, 152, 169, 0, 175, 0,
      /* 2563 */ 152, 152, 152, 152, 143, 152, 0, 0, 0, 169, 0, 0, 0, 152, 171, 0, 0, 0, 177, 0, 86, 87, 0, 1372, 86,
      /* 2588 */ 1372, 0, 0, 1536, 0, 0, 0, 0, 112, 646, 646, 646, 86, 87, 0, 87, 86, 86, 87, 0, 0, 1536, 0, 0, 0, 0, 113,
      /* 2615 */ 647, 0, 0, 0, 0, 114, 646, 646, 646, 0, 86, 0, 0, 0, 0, 0, 0, 0, 2048, 2048, 0, 86, 86, 86, 86, 86, 0, 0,
      /* 2643 */ 109, 112, 613, 0, 0, 117, 87, 87, 87, 0, 0, 0, 0, 0, 9294, 0, 0, 131, 0, 112, 646, 0, 0, 0, 0, 154, 143,
      /* 2670 */ 0, 152, 152, 156, 22684, 0, 112, 112, 0, 0, 5376, 84, 85, 0, 0, 0, 8960, 1372, 0, 1372, 0, 172, 172, 172,
      /* 2694 */ 22700, 172, 0, 0, 0, 646, 0, 0, 0, 0, 152, 156, 0, 152, 22680, 178, 172, 152, 178, 0, 0, 109, 112, 613,
      /* 2718 */ 3328, 0, 0, 109, 112, 613, 0, 116, 0, 0, 88, 0, 88, 0, 0, 88, 0, 1372, 0, 1372, 0, 88, 88, 88, 0, 0, 0,
      /* 2745 */ 0, 0, 645, 658, 658, 658, 169, 169, 169, 169, 169, 0, 8192, 0, 0, 5723, 5723, 5723, 5723, 0, 0, 0, 0, 0,
      /* 2769 */ 0, 8704, 0, 0, 0, 0, 0, 0, 0, 2816, 0, 8704, 0, 8704, 8704, 8704, 8704, 8704, 0, 0, 0, 0, 0, 1372, 0,
      /* 2794 */ 1372, 0, 646, 148, 0, 0, 0, 152, 143, 0, 0, 5738, 0, 0, 0, 109, 0, 0, 5738, 0, 34048, 0, 109, 0, 0, 5888,
      /* 2820 */ 5888, 0, 5888, 5888, 0, 5888, 5888, 5888, 5888, 5888, 5888, 0, 112, 112, 646, 160, 0, 0, 0, 152, 172, 0,
      /* 2842 */ 0, 0, 178, 112, 112, 613, 125, 0, 0, 0, 129, 95, 0, 0, 0, 0, 0, 0, 0, 97, 97, 3938, 95, 0, 0, 95, 0, 0,
      /* 2870 */ 3938, 95, 0, 0, 0, 0, 0, 3939, 3938, 3939, 3939, 3939, 3939, 3939, 3939, 0, 0, 0, 0, 0, 1372, 0, 1372,
      /* 2893 */ 85, 0, 96, 96, 0, 0, 0, 0, 0, 1372, 0, 1372, 95, 0, 4608, 0, 0, 0, 0, 0, 0, 0, 5723, 0, 0, 169, 169, 169,
      /* 2921 */ 169, 169, 121, 0, 0, 121, 112, 646, 646, 646, 0, 5723, 0, 0, 0, 0, 5723, 0, 1372, 0, 1372, 0, 0, 4096,
      /* 2945 */ 4205, 112, 613, 0, 0, 0, 6656, 1372, 0, 1372, 0, 89, 9294, 0, 0, 1372, 9294, 1372, 9294, 9294, 9294, 0,
      /* 2967 */ 0, 9294, 0, 0, 109, 112, 627, 0, 0, 0, 132, 112, 646, 646, 646, 90, 9294, 0, 0, 1372, 9294, 1372, 9294,
      /* 2990 */ 9294, 9294, 9294, 0, 9294, 9294, 9294, 9294, 9294, 9294, 9294, 9294, 104, 0, 5738, 0, 0, 0, 109, 0, 0,
      /* 3011 */ 6912, 6912, 6912, 6912, 6912, 6912, 0, 6912, 112, 112, 613, 0, 126, 0, 0, 129, 646, 0, 149, 0, 0, 152,
      /* 3033 */ 143, 0, 0, 7168, 7168, 7168, 7168, 7168, 7168, 0, 7168, 112, 112, 646, 0, 0, 162, 0, 152, 152, 143, 143,
      /* 3055 */ 0, 112, 0, 0, 109, 112, 613, 0, 0, 0, 84, 85, 0, 0, 0, 0, 34048, 7780, 109, 0, 167, 0, 152, 169, 0, 0, 0,
      /* 3082 */ 152, 173, 0, 0, 0, 154, 112, 112, 613, 0, 0, 127, 0, 129, 169, 169, 169, 169, 169, 0, 0, 4864, 118, 5738,
      /* 3106 */ 1536, 0, 0, 0, 0, 112, 646, 0, 0, 0, 0, 142, 143, 0, 112, 123, 613, 0, 0, 0, 0, 129, 152, 163, 143, 143,
      /* 3132 */ 0, 112, 112, 0, 0, 8704, 8704, 8704, 8704, 8704, 8704, 0, 8704, 169, 169, 169, 169, 180, 0, 0, 0, 9472,
      /* 3154 */ 85, 0, 0, 0, 84, 85, 0, 0, 8448, 112, 112, 646, 0, 161, 0, 0, 152, 152, 143, 143, 0, 112, 112, 0, 0, 112,
      /* 3180 */ 649, 0, 0, 0, 0, 1372, 0, 1372, 9728, 0, 5120, 152, 169, 0, 0, 0, 152, 152, 143, 143, 0, 112, 112, 166,
      /* 3204 */ 83, 9294, 0, 0, 0, 0, 0, 0, 0, 6656, 0, 105, 5738, 0, 34156, 0, 109, 0, 0, 22528, 0, 112, 646, 646, 646,
      /* 3229 */ 0, 0, 150, 0, 152, 143, 0, 0, 3840, 0, 0, 0, 0, 0, 1372, 0, 1372, 84, 111, 0, 109, 112, 613, 0, 0, 0,
      /* 3255 */ 109, 114, 613, 0, 0, 0, 110, 112, 613, 0, 0, 0, 84, 85, 0, 7936, 0, 0, 5738, 1536, 0, 0, 122, 0, 112,
      /* 3280 */ 112, 613, 0, 0, 0, 0, 129, 152, 152, 143, 143, 165, 112, 112, 0, 77, 77, 77, 7501, 77, 77, 77, 94, 7518,
      /* 3304 */ 94, 77, 7518, 94, 77, 94, 94, 94, 94, 94, 94, 77, 613, 0, 0, 0, 100, 613, 0, 0, 0, 0, 6656, 0, 0, 0, 0,
      /* 3331 */ 6656, 6656, 0, 0, 0, 0, 0, 0, 6656, 0, 8960, 0, 8960, 8960, 0, 0, 8960, 0, 8960, 0, 0, 8960, 0, 0, 112,
      /* 3356 */ 646, 0, 0, 0, 141, 8960, 8960, 0, 8960, 0, 0, 8960, 8960, 0, 8960, 0, 8960, 8960, 8960, 0, 0, 0, 0, 0,
      /* 3380 */ 2304, 2304, 0, 2304, 8960, 8960, 0, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 0, 5888, 0, 0, 0,
      /* 3400 */ 5888, 0, 5888, 5888, 5888, 5888, 5888, 0, 0, 0, 0, 0, 0, 5888, 5888, 5888, 5888, 5888, 5888, 5888, 0, 77,
      /* 3422 */ 77, 7501, 1372, 94, 1372, 77
    ];

    private static EXPECTED: number[] =
    [
      /*   0 */ 6, 22, 38, 54, 70, 75, 86, 90, 94, 101, 98, 105, 112, 109, 116, 120, 124, 128, 132, 136, 140, 144, 148,
      /*  23 */ 152, 156, 281, 165, 168, 180, 185, 278, 189, 181, 202, 220, 192, 214, 160, 225, 219, 159, 224, 220, 161,
      /*  44 */ 225, 215, 229, 232, 225, 231, 225, 195, 208, 210, 176, 205, 236, 198, 239, 242, 246, 250, 257, 261, 254,
      /*  65 */ 262, 259, 266, 268, 272, 275, 209, 174, 171, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
      /*  86 */ 2048, 131072, 2, 4194306, 33554434, 4098, 8194, 516, 1048580, 2, 16386, -2143289342, 786436, -2143289342,
      /* 100 */ 1075838978, 301989890, 33554434, 4098, 1073741826, 120, -1606418430, 131192, 12582914, 234881026,
      /* 110 */ 14680066, 549453826, 301990146, 33554690, -1337982974, -1606418430, -1337982974, 1075908610, 549453826,
      /* 119 */ 1086324738, -1337982718, -1606418174, 1088421890, 49546, 566231042, -1337982718, 503316738, 234881282,
      /* 128 */ 505413890, 236978434, 503316738, 505413890, 33603978, 750780418, -1136656126, -1405091582, 1088491522,
      /* 137 */ -1134558974, -1402994430, 33605002, 767557634, -1136656126, -1134554878, -1134558974, -1402990334,
      /* 145 */ -1134554878, 566280586, 234930570, 566281610, 234931594, 599840138, 767607178, 767608202, 767611274,
      /* 154 */ 767612298, 1843446154, 1843447178, 1843515786, 1843516810, 2, 0x80000000, 262144, 524288, 64, 8388608, 4,
      /* 166 */ 512, 1048576, 0, 0x80000000, 1073741824, 0, 1, 0, 0, 16, 16, 0, 0, 4, 262144, 524288, 2097152, 32, 72,
      /* 185 */ 120, 536870914, 8388608, 65536, 2, 4096, 0x80000000, 262144, 524288, 72, 8388608, 8388608, 0, 0, 56, 24,
      /* 201 */ 28, 8388608, 8388608, 8, 2, 1, 0, 8, 0, 0, 0, 0, 24, 8388608, 8388608, 2, 2, 0x80000000, 2, 2, 2, 2,
      /* 223 */ 0x80000000, 64, 8388608, 8388608, 8388608, 8388608, 262144, 524288, 8388608, 8388608, 0x80000000, 262144,
      /* 235 */ 8388608, 1, 4, 0, 8, 12, 6, 56, 28, 12, 3, 60, 57, 24, 28, 57, 56, 60, 28, 26, 30, 59, 26, 30, 26, 30, 30,
      /* 262 */ 30, 60, 62, 30, 60, 62, 60, 62, 62, 62, 62, 63, 63, 63, 0, 0, 8, 32768, 8421376, 2, 0, 4096, 8192
    ];

    private static LOOKAHEAD: number[] =
    [
      /*   0 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 48, 30, 30, 60, 30, 30, 30, 44, 30, 30, 30, 30, 30, 30, 29, 38, 56,
      /*  26 */ 30, 30, 48, 74, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 110, 84, 84, 84, 97, 84, 84, 84, 84, 84,
      /*  52 */ 68, 82, 84, 84, 84, 84, 102, 84, 84, 84, 84, 84, 92, 84, 84, 84, 0, 0, 0, 42, 0, 43, 0, 0, 0, 44, 45, 0,
      /*  80 */ 51, 52, 49, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 38, 39, 0, 0, 0, 40, 0, 41, 0, 0, 0, 0,
      /* 112 */ 0, 46, 47, 0, 53, 54
    ];

    private static CASEID: number[] =
    [
      /*    0 */ 604, 869, 576, 584, 584, 584, 583, 584, 604, 869, 576, 584, 584, 584, 583, 584, 589, 955, 593, 597, 584,
      /*   21 */ 584, 602, 584, 824, 876, 608, 584, 584, 584, 615, 584, 667, 869, 620, 584, 584, 584, 627, 584, 584, 813,
      /*   42 */ 632, 636, 584, 584, 642, 584, 584, 813, 632, 636, 584, 584, 642, 584, 648, 962, 652, 656, 584, 584, 602,
      /*   63 */ 584, 584, 822, 661, 665, 584, 584, 642, 584, 824, 876, 608, 584, 584, 584, 615, 584, 667, 869, 620, 584,
      /*   84 */ 584, 584, 627, 584, 589, 955, 593, 597, 584, 584, 602, 584, 671, 962, 652, 656, 584, 584, 602, 584, 584,
      /*  105 */ 584, 675, 584, 584, 792, 584, 584, 584, 579, 675, 584, 584, 979, 680, 584, 598, 686, 690, 584, 584, 842,
      /*  126 */ 862, 584, 585, 584, 883, 584, 584, 611, 696, 584, 704, 972, 861, 584, 704, 972, 861, 584, 698, 885, 702,
      /*  147 */ 584, 584, 584, 642, 584, 584, 584, 642, 584, 584, 584, 642, 584, 698, 885, 702, 584, 704, 859, 861, 584,
      /*  168 */ 704, 859, 861, 584, 698, 885, 702, 584, 584, 908, 708, 584, 584, 908, 708, 584, 584, 799, 714, 584, 720,
      /*  189 */ 815, 724, 584, 616, 584, 883, 584, 704, 892, 861, 584, 704, 892, 861, 584, 698, 885, 702, 584, 704, 972,
      /*  210 */ 895, 584, 704, 972, 895, 584, 698, 885, 702, 584, 910, 692, 730, 584, 716, 885, 736, 584, 742, 584, 602,
      /*  231 */ 584, 720, 815, 724, 584, 746, 584, 602, 584, 750, 981, 754, 584, 720, 815, 724, 584, 910, 692, 730, 584,
      /*  252 */ 704, 849, 861, 584, 704, 849, 861, 584, 698, 885, 702, 584, 716, 885, 736, 584, 704, 859, 895, 584, 704,
      /*  273 */ 859, 895, 584, 698, 885, 702, 584, 720, 815, 724, 584, 720, 815, 724, 584, 720, 815, 724, 584, 760, 981,
      /*  294 */ 754, 584, 720, 815, 724, 584, 764, 584, 602, 584, 720, 815, 724, 584, 628, 584, 584, 584, 584, 783, 584,
      /*  315 */ 584, 584, 676, 768, 584, 598, 584, 774, 584, 584, 831, 780, 584, 756, 924, 789, 584, 598, 584, 584, 584,
      /*  336 */ 657, 584, 584, 584, 796, 584, 584, 584, 803, 931, 584, 584, 584, 776, 584, 584, 584, 682, 810, 584, 756,
      /*  357 */ 770, 789, 584, 584, 941, 819, 584, 584, 948, 828, 584, 835, 806, 839, 584, 846, 584, 584, 584, 584, 856,
      /*  378 */ 584, 584, 710, 584, 584, 584, 584, 852, 866, 584, 756, 917, 789, 584, 584, 623, 873, 584, 756, 924, 880,
      /*  399 */ 584, 584, 776, 584, 584, 889, 969, 584, 584, 901, 806, 839, 584, 905, 584, 584, 584, 584, 897, 584, 584,
      /*  420 */ 584, 732, 914, 584, 835, 738, 839, 584, 921, 584, 584, 584, 846, 928, 584, 584, 938, 584, 584, 584, 945,
      /*  441 */ 952, 584, 584, 584, 776, 584, 584, 584, 776, 584, 584, 584, 638, 810, 584, 756, 785, 789, 584, 584, 644,
      /*  462 */ 584, 584, 756, 770, 880, 584, 726, 584, 584, 584, 584, 934, 839, 584, 959, 584, 584, 584, 584, 897, 584,
      /*  483 */ 584, 584, 806, 839, 584, 966, 584, 584, 584, 905, 928, 584, 584, 901, 738, 839, 584, 976, 584, 584, 584,
      /*  504 */ 584, 897, 584, 584, 921, 928, 584, 584, 584, 856, 584, 584, 985, 584, 584, 584, 584, 776, 584, 584, 584,
      /*  525 */ 776, 584, 584, 989, 993, 584, 584, 584, 897, 584, 584, 959, 928, 584, 584, 584, 897, 584, 584, 966, 928,
      /*  546 */ 584, 584, 584, 897, 584, 584, 584, 738, 997, 584, 1001, 584, 584, 584, 976, 928, 584, 584, 1005, 584,
      /*  566 */ 584, 584, 584, 897, 584, 584, 1001, 928, 584, 584, 1225, 1021, 1170, 1010, 1023, 1010, 1022, 1147, 1010,
      /*  585 */ 1010, 1010, 1010, 1106, 1068, 1068, 1027, 1112, 1344, 1041, 1045, 1352, 1353, 1010, 1010, 1010, 1158,
      /*  602 */ 1068, 1049, 1010, 1010, 1009, 1010, 1201, 1061, 1170, 1010, 1029, 1010, 1182, 1164, 1010, 1010, 1010,
      /*  619 */ 1273, 1173, 1072, 1170, 1010, 1036, 1010, 1397, 1219, 1010, 1010, 1010, 1290, 1011, 1079, 1083, 1090,
      /*  636 */ 1085, 1091, 1010, 1010, 1037, 1010, 1159, 1095, 1010, 1010, 1037, 1334, 1068, 1068, 1100, 1192, 1365,
      /*  653 */ 1122, 1126, 1379, 1380, 1010, 1010, 1010, 1312, 1011, 1130, 1134, 1141, 1136, 1142, 1010, 1010, 1067,
      /*  670 */ 1010, 1068, 1068, 1146, 1192, 1206, 1010, 1010, 1010, 1442, 1118, 1151, 1010, 1010, 1154, 1334, 1163,
      /*  687 */ 1168, 1010, 1074, 1199, 1010, 1010, 1010, 1171, 1010, 1028, 1010, 1010, 1010, 1205, 1010, 1231, 1210,
      /*  704 */ 1010, 1010, 1218, 1010, 1073, 1217, 1010, 1010, 1241, 1010, 1056, 1229, 1010, 1010, 1250, 1010, 1068,
      /*  721 */ 1068, 1235, 1276, 1359, 1049, 1010, 1010, 1261, 1010, 1297, 1245, 1010, 1010, 1423, 1010, 1178, 1255,
      /*  738 */ 1010, 1010, 1429, 1010, 1068, 1068, 1260, 1324, 1068, 1068, 1265, 1387, 1068, 1068, 1270, 1412, 1393,
      /*  755 */ 1049, 1010, 1010, 1475, 1010, 1068, 1068, 1280, 1412, 1068, 1068, 1285, 1455, 1295, 1010, 1010, 1010,
      /*  772 */ 1488, 1475, 1301, 1010, 1010, 1010, 1509, 1010, 1314, 1010, 1010, 1010, 1051, 1010, 1010, 1488, 1010,
      /*  789 */ 1484, 1475, 1010, 1010, 1051, 1010, 1096, 1211, 1318, 1010, 1010, 1057, 1010, 1223, 1109, 1010, 1010,
      /*  806 */ 1010, 1063, 1369, 1501, 1494, 1010, 1010, 1010, 1086, 1010, 1010, 1033, 1010, 1425, 1338, 1010, 1010,
      /*  823 */ 1137, 1010, 1010, 1055, 1010, 1340, 1342, 1010, 1010, 1153, 1010, 1308, 1062, 1062, 1500, 1063, 1373,
      /*  840 */ 1375, 1010, 1010, 1168, 1010, 1074, 1236, 1384, 1010, 1010, 1168, 1419, 1010, 1036, 1010, 1399, 1391,
      /*  857 */ 1010, 1010, 1010, 1168, 1419, 1218, 1010, 1010, 1010, 1330, 1010, 1010, 1010, 1170, 1010, 1015, 1035,
      /*  874 */ 1010, 1010, 1010, 1170, 1010, 1017, 1472, 1475, 1010, 1010, 1177, 1010, 1010, 1171, 1172, 1189, 1010,
      /*  891 */ 1010, 1010, 1186, 1418, 1075, 1218, 1010, 1010, 1416, 1010, 1062, 1062, 1502, 1063, 1246, 1409, 1010,
      /*  908 */ 1010, 1215, 1010, 1010, 1240, 1010, 1103, 1010, 1010, 1010, 1303, 1477, 1304, 1251, 1433, 1010, 1010,
      /*  925 */ 1303, 1477, 1486, 1440, 1010, 1010, 1010, 1328, 1010, 1010, 1063, 1405, 1501, 1256, 1446, 1010, 1010,
      /*  942 */ 1336, 1010, 1348, 1321, 1010, 1010, 1010, 1340, 1357, 1363, 1436, 1010, 1010, 1010, 1350, 1034, 1033,
      /*  959 */ 1266, 1459, 1010, 1010, 1377, 1117, 1116, 1281, 1466, 1010, 1010, 1403, 1010, 1010, 1186, 1418, 1196,
      /*  976 */ 1286, 1481, 1010, 1010, 1511, 1010, 1010, 1116, 1010, 1449, 1010, 1492, 1010, 1452, 1010, 1010, 1010,
      /*  993 */ 1462, 1010, 1010, 1010, 1498, 1010, 1010, 1010, 1291, 1506, 1010, 1010, 1469, 1010, 1492, 1010, 294930,
      /* 1010 */ 0, 0, 0, 0, 105, 33302, 33302, 0, 33302, 0, 33302, 286738, 0, 0, 0, 8326, 0, 385042, 0, 0, 0, 16662, 0,
      /* 1033 */ 0, 98308, 0, 0, 0, 24966, 0, 0, 145, 141, 98308, 98308, 133, 133, 98308, 98308, 114696, 114696, 0, 0,
      /* 1053 */ 106, 0, 417810, 0, 0, 0, 66806, 66806, 409618, 0, 0, 0, 106516, 106516, 442386, 0, 0, 0, 114696, 434194,
      /* 1073 */ 0, 0, 0, 122900, 0, 122900, 77, 158406, 71, 71, 158406, 0, 158406, 0, 0, 158406, 158406, 158406, 158406,
      /* 1092 */ 158406, 158406, 0, 368658, 0, 0, 0, 238178, 475154, 0, 483346, 0, 0, 591346, 0, 0, 696338, 0, 0, 706850,
      /* 1112 */ 0, 0, 763570, 763650, 0, 99942, 0, 0, 0, 246866, 143, 139, 99942, 99942, 133, 133, 99942, 99942, 77,
      /* 1131 */ 166758, 71, 71, 166758, 0, 166758, 0, 0, 166758, 166758, 166758, 166758, 166758, 166758, 0, 475154, 0, 0,
      /* 1149 */ 0, 278546, 253970, 656514, 0, 0, 24596, 0, 0, 33970, 0, 0, 0, 360466, 322386, 0, 0, 0, 401426, 0, 131080,
      /* 1170 */ 0, 0, 33302, 0, 0, 0, 117, 180232, 0, 0, 0, 548882, 0, 706802, 0, 16662, 0, 131080, 122900, 0, 0, 829730,
      /* 1192 */ 0, 0, 845490, 845570, 122900, 122900, 0, 122900, 681122, 0, 0, 33302, 121, 352274, 0, 0, 0, 630978,
      /* 1210 */ 344082, 0, 0, 0, 770066, 0, 131080, 122900, 122900, 0, 0, 0, 426002, 0, 829682, 0, 0, 33302, 123, 66806,
      /* 1230 */ 66806, 0, 0, 33302, 335890, 499730, 0, 0, 0, 886706, 532498, 0, 0, 0, 903522, 524306, 0, 0, 0, 1009586,
      /* 1250 */ 565266, 0, 0, 0, 1042354, 557074, 0, 0, 0, 1048594, 573458, 0, 0, 0, 1083746, 581650, 0, 0, 0, 1099698,
      /* 1270 */ 606226, 0, 614418, 0, 0, 892946, 0, 0, 878258, 878338, 606226, 0, 0, 0, 1116082, 622610, 0, 0, 0,
      /* 1289 */ 1148850, 210, 0, 0, 0, 1173426, 305842, 0, 0, 0, 33302, 516114, 0, 681122, 0, 0, 40980, 0, 40980, 66002,
      /* 1309 */ 24596, 0, 24596, 0, 393234, 0, 0, 49554, 24596, 770066, 770066, 770066, 0, 0, 903586, 0, 0, 976562,
      /* 1327 */ 976642, 780610, 0, 0, 0, 49554, 24966, 459218, 0, 0, 0, 75110, 75110, 0, 0, 90132, 90132, 0, 0, 98308,
      /* 1347 */ 149, 0, 75110, 0, 0, 98308, 98308, 98308, 98308, 0, 466962, 0, 0, 0, 98308, 114696, 0, 90132, 0, 0,
      /* 1367 */ 99942, 147, 106516, 0, 106520, 106520, 0, 106520, 106516, 106516, 0, 0, 99942, 99942, 99942, 99942, 0,
      /* 1384 */ 886610, 886802, 886898, 0, 0, 1001138, 1001218, 0, 180264, 0, 0, 99942, 114696, 66002, 24966, 0, 24966,
      /* 1401 */ 0, 24966, 960834, 0, 0, 0, 106520, 106520, 1009490, 1009682, 1009778, 0, 0, 1025714, 1025794, 0, 114728,
      /* 1418 */ 0, 0, 122900, 122900, 122900, 0, 83430, 0, 0, 181618, 75110, 0, 106516, 106520, 106520, 1042258, 1042450,
      /* 1435 */ 1042546, 0, 0, 1059346, 1059298, 0, 141514, 0, 0, 314114, 0, 1048594, 1048594, 1048594, 0, 0, 1059394, 0,
      /* 1453 */ 0, 1083810, 0, 0, 1140402, 1140482, 1099602, 1099794, 1099890, 0, 0, 1157650, 1157602, 1115986, 1116178,
      /* 1468 */ 1116274, 0, 0, 1157698, 0, 40984, 0, 40980, 0, 0, 0, 40984, 40984, 1148754, 1148946, 1149042, 0, 40984,
      /* 1486 */ 40980, 40980, 0, 40980, 40984, 40984, 0, 150122, 0, 0, 450962, 0, 0, 106520, 106516, 0, 106516, 0, 0, 0,
      /* 1506 */ 1173330, 1173522, 1173618, 0, 49192, 0, 0, 58038, 262162
    ];

    private static TOKENSET: number[] =
    [
      /*   0 */ 41, 0, 41, 0, 62, 0, 37, 0, 36, 0, 23, 0, 23, 0, 64, 0, 23, 0, 37, 0, 36, 0, 62, 0, 62, 0, 2, 11, 17, 23,
      /*  30 */ 33, 18, 10, 21, 59, 59, 31, 9, 9, 9, 31, 47, 47, 31, 29, 29, 30, 48, 10, 54, 54, 31, 53, 53, 31, 25, 24,
      /*  57 */ 39, 48, 39, 55, 48, 25, 45, 45, 31, 24, 44, 44, 31, 48, 48, 48, 48, 48, 39, 48, 5, 3, 15, 14, 32, 57, 5,
      /*  84 */ 6, 20, 8, 4, 19, 46, 34, 40, 68, 20, 1, 0, 27, 51, 26, 50, 4, 8, 67, 20, 4, 13, 65, 20, 22, 20, 16, 4, 4,
      /* 113 */ 13, 43, 12, 42, 0, 49, 20, 4, 56, 20, 22, 63, 20, 4, 22, 1, 7, 4, 4, 16, 4, 22, 4, 22, 4, 28, 20, 22, 7,
      /* 142 */ 4, 22
    ];

    private static LOOKBACK: number[] =
    [
      /*   0 */ 188, 188, 188, 188, 188, 186, 189, 194, 197, 200, 200, 200, 188, 203, 206, 206, 206, 209, 214, 214, 214,
      /*  21 */ 188, 188, 188, 232, 219, 229, 229, 229, 224, 237, 237, 237, 240, 243, 243, 243, 188, 188, 188, 188, 188,
      /*  42 */ 188, 246, 257, 257, 257, 257, 257, 257, 268, 268, 268, 268, 268, 268, 279, 279, 279, 279, 279, 279, 290,
      /*  63 */ 290, 290, 290, 290, 290, 188, 188, 188, 188, 188, 188, 301, 306, 313, 313, 313, 316, 321, 321, 321, 188,
      /*  84 */ 188, 188, 326, 331, 336, 336, 336, 188, 188, 188, 339, 344, 349, 349, 349, 188, 188, 188, 352, 357, 357,
      /* 105 */ 357, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 362, 362, 362, 362, 362, 362, 375, 375, 375, 375,
      /* 126 */ 375, 375, 388, 388, 388, 388, 388, 388, 401, 401, 401, 401, 401, 401, 414, 423, 188, 188, 188, 426, 426,
      /* 147 */ 426, 431, 436, 436, 436, 436, 439, 439, 439, 439, 444, 444, 444, 449, 449, 449, 454, 454, 454, 461, 468,
      /* 168 */ 188, 188, 188, 471, 482, 477, 477, 477, 474, 487, 487, 487, 188, 492, 500, 495, 495, 495, 3, 2, 0, 5, 5,
      /* 191 */ 3, 4, 0, 6, 6, 0, 10, 9, 0, 10, 11, 0, 12, 12, 0, 13, 13, 0, 19, 18, 15, 14, 0, 19, 20, 15, 16, 0, 27, 28,
      /* 221 */ 21, 22, 0, 31, 32, 21, 23, 0, 25, 25, 0, 31, 30, 27, 26, 0, 29, 29, 0, 35, 34, 0, 35, 36, 0, 63, 62, 57,
      /* 249 */ 56, 51, 50, 45, 44, 38, 37, 0, 63, 64, 57, 58, 51, 52, 45, 46, 38, 39, 0, 63, 65, 57, 59, 51, 53, 45, 47,
      /* 276 */ 38, 40, 0, 63, 66, 57, 60, 51, 54, 45, 48, 38, 41, 0, 63, 67, 57, 61, 51, 55, 45, 49, 38, 42, 0, 72, 71,
      /* 303 */ 69, 68, 0, 74, 74, 72, 73, 69, 70, 0, 75, 75, 0, 81, 80, 77, 76, 0, 81, 82, 77, 78, 0, 89, 88, 84, 83, 0,
      /* 331 */ 89, 90, 84, 85, 0, 87, 87, 0, 97, 96, 92, 91, 0, 97, 98, 92, 93, 0, 95, 95, 0, 104, 103, 99, 100, 0, 104,
      /* 358 */ 105, 99, 101, 0, 135, 134, 129, 128, 123, 122, 117, 116, 112, 111, 107, 106, 0, 135, 136, 129, 130, 123,
      /* 380 */ 124, 117, 118, 112, 113, 107, 108, 0, 135, 137, 129, 131, 123, 125, 117, 119, 112, 114, 107, 109, 0, 135,
      /* 402 */ 138, 129, 132, 123, 126, 117, 120, 112, 115, 107, 110, 0, 135, 139, 129, 133, 123, 127, 117, 121, 0, 140,
      /* 424 */ 140, 0, 146, 145, 143, 142, 0, 146, 147, 143, 144, 0, 148, 148, 0, 154, 153, 150, 149, 0, 154, 155, 150,
      /* 447 */ 151, 0, 154, 156, 150, 152, 0, 164, 163, 161, 160, 158, 157, 0, 164, 165, 161, 162, 158, 159, 0, 166, 166,
      /* 470 */ 0, 169, 168, 0, 169, 170, 0, 174, 175, 171, 171, 0, 178, 177, 174, 173, 0, 178, 179, 176, 176, 0, 69, 180,
      /* 494 */ 0, 184, 185, 181, 181, 0, 184, 183, 0
    ];

    private static GOTO: number[] =
    [
      /*   0 */ 116, 125, 125, 130, 125, 125, 134, 124, 125, 205, 125, 125, 230, 125, 125, 156, 125, 125, 198, 125, 125,
      /*  21 */ 166, 124, 125, 151, 125, 125, 138, 125, 125, 142, 125, 125, 146, 124, 125, 166, 124, 125, 150, 126, 125,
      /*  42 */ 155, 125, 160, 125, 184, 182, 125, 164, 211, 125, 184, 182, 170, 125, 174, 198, 125, 180, 189, 125, 182,
      /*  63 */ 125, 193, 118, 125, 184, 182, 125, 197, 202, 125, 209, 182, 125, 215, 118, 125, 184, 182, 219, 185, 118,
      /*  84 */ 223, 125, 227, 237, 124, 234, 120, 124, 241, 248, 125, 182, 125, 252, 118, 256, 125, 182, 125, 260, 118,
      /* 105 */ 244, 124, 264, 176, 124, 122, 267, 124, 271, 274, 124, 373, 278, 314, 315, 314, 314, 314, 405, 389, 314,
      /* 126 */ 314, 314, 314, 288, 314, 370, 314, 315, 314, 314, 444, 285, 314, 398, 314, 315, 314, 408, 314, 315, 314,
      /* 147 */ 314, 421, 285, 306, 314, 314, 314, 321, 339, 314, 314, 314, 326, 313, 295, 281, 319, 314, 434, 314, 314,
      /* 168 */ 314, 418, 302, 330, 314, 315, 314, 326, 314, 314, 314, 441, 314, 321, 314, 314, 325, 314, 314, 314, 377,
      /* 189 */ 314, 428, 314, 315, 325, 314, 401, 330, 431, 314, 314, 314, 391, 349, 346, 389, 314, 292, 314, 315, 314,
      /* 210 */ 336, 314, 314, 333, 314, 325, 314, 411, 330, 309, 330, 314, 315, 314, 395, 314, 315, 314, 380, 389, 314,
      /* 231 */ 299, 314, 315, 314, 383, 389, 314, 314, 352, 346, 355, 346, 389, 314, 314, 358, 346, 314, 415, 314, 315,
      /* 252 */ 325, 314, 342, 330, 314, 425, 314, 315, 325, 314, 437, 330, 361, 346, 389, 314, 314, 364, 346, 314, 386,
      /* 273 */ 389, 314, 314, 367, 346, 331945, 8473, 335881, 0, 0, 0, 119193, 372745, 58137, 376841, 0, 0, 0, 319529,
      /* 292 */ 393433, 74009, 397321, 0, 0, 0, 324937, 401657, 82201, 405513, 0, 0, 0, 356361, 6, 110617, 114769, 0, 0,
      /* 311 */ 0, 458761, 119145, 0, 0, 0, 0, 24580, 119241, 119289, 0, 0, 0, 67009, 61452, 0, 0, 0, 42353, 360617,
      /* 331 */ 164121, 364553, 0, 0, 135321, 0, 0, 86044, 0, 0, 114769, 0, 0, 0, 532489, 430817, 246553, 434185, 0, 0,
      /* 351 */ 425993, 0, 0, 491529, 0, 0, 516105, 0, 0, 544777, 0, 0, 552969, 0, 0, 561161, 0, 0, 581641, 0, 8473,
      /* 372 */ 335881, 0, 0, 0, 135289, 463065, 254233, 466953, 0, 45076, 483337, 0, 49172, 495625, 0, 49172, 565257, 0,
      /* 390 */ 57348, 0, 0, 0, 50577, 471289, 270617, 475145, 0, 74009, 397321, 0, 0, 0, 409609, 0, 299841, 507913, 0,
      /* 409 */ 82201, 405513, 0, 0, 0, 454665, 0, 254233, 466953, 0, 99137, 417801, 0, 0, 0, 369353, 0, 270617, 475145,
      /* 428 */ 0, 164121, 364553, 0, 0, 189065, 0, 0, 344073, 0, 0, 0, 536585, 430857, 246553, 434185, 0, 189033, 0,
      /* 447 */ 369313
    ];

    private static TOKEN: string [] =
    [
      "%ERROR",
      "Whitespace",
      "Space",
      "CharCode",
      "Char",
      "CharRange",
      "CharCodeRange",
      "'$'",
      "'('",
      "'*/'",
      "'-'",
      "':'",
      "'::='",
      "'=='",
      "'['",
      "'[^'",
      "'\\\\'",
      "']'",
      "'definition'",
      "'explicit'",
      "'ws'",
      "CaretName",
      "EOF",
      "EquivalenceLookAhead",
      "'&'",
      "')'",
      "'*'",
      "'+'",
      "'/'",
      "'/*'",
      "'<<'",
      "'<?TOKENS?>'",
      "'>>'",
      "'?'",
      "'|'",
      "Name",
      "StringLiteral",
      "'.'"
    ];

    private static NONTERMINAL: string [] =
    [
      "Grammar",
      "SyntaxDefinition",
      "SyntaxProduction",
      "SyntaxChoice",
      "SyntaxSequence",
      "SyntaxItem",
      "SyntaxPrimary",
      "LexicalDefinition",
      "LexicalProduction",
      "ContextChoice",
      "LexicalChoice",
      "ContextExpression",
      "LexicalSequence",
      "LexicalItem",
      "LexicalPrimary",
      "NameOrString",
      "Context",
      "CharClass",
      "Option",
      "Preference",
      "Delimiter",
      "Equivalence",
      "EquivalenceCharRange"
    ];
  }

  export class TopDownTreeBuilder implements ParsingEventHandler
  {
    private input: string = null;
    private stack: Nonterminal[] = null;

    public reset(input: string): void
    {
      this.input = input;
      this.stack = [];
    }

    public startNonterminal(name: string, begin: number): void
    {
      var nonterminal = new Nonterminal(name, begin, begin, []);
      if (this.stack.length > 0) this.addChild(nonterminal);
      this.stack.push(nonterminal);
    }

    public endNonterminal(name: string, end: number): void
    {
      this.stack[this.stack.length - 1].end = end;
      if (this.stack.length > 1) this.stack.pop();
    }

    public terminal(name: string, begin: number, end: number): void
    {
      this.addChild(new Terminal(name, begin, end));
    }

    public whitespace(begin: number, end: number): void
    {
    }

    private addChild(s: Symbol): void
    {
      var current = this.stack[this.stack.length - 1];
      current.children.push(s);
    }

    public serialize(e: ParsingEventHandler): void
    {
      e.reset(this.input);
      this.stack[0].send(e);
    }
  }

  export abstract class Symbol
  {
    public name: string;
    public begin: number;
    public end: number;

    constructor(name: string, begin: number, end: number)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract send(e: ParsingEventHandler): void;
  }

  export class Terminal extends Symbol
  {
    constructor(name: string, begin: number, end: number)
    {
      super(name, begin, end);
    }

    public send(e: ParsingEventHandler): void
    {
      e.terminal(this.name, this.begin, this.end);
    }
  }

  export class Nonterminal extends Symbol
  {
    public children: Symbol[];

    constructor(name: string, begin: number, end: number, children: Symbol[])
    {
      super(name, begin, end);
      this.children = children;
    }

    public send(e: ParsingEventHandler): void
    {
      e.startNonterminal(this.name, this.begin);
      var pos = this.begin;
      this.children.forEach
      (
        function(c): void
        {
          if (pos < c.begin) e.whitespace(pos, c.begin);
          c.send(e);
          pos = c.end;
        }
      );
      if (pos < this.end) e.whitespace(pos, this.end);
      e.endNonterminal(this.name, this.end);
    }
  }

  export class ParseTreeBuilder implements BottomUpEventHandler
  {
    private input: string = null;
    private stack: Symbol[] = [];
    private top: number = -1;

    public reset(input: string): void
    {
      this.input = input;
      this.top = -1;
    }

    public getStack(): Symbol[] {return this.stack;}
    public getTop(): number {return this.top;}

    public nonterminal(name: string, begin: number, end: number, count: number): void
    {
      this.push(new Nonterminal(name, begin, end, this.pop(count)));
    }

    public terminal(name: string, begin: number, end: number): void
    {
      this.push(new Terminal(name, begin, end));
    }

    public serialize(e: ParsingEventHandler): void
    {
      e.reset(this.input);
      for (var i = 0; i <= this.top; ++i)
      {
        this.stack[i].send(e);
      }
    }

    public push(s: Symbol): void
    {
      this.stack[++this.top] = s;
    }

    public pop(count: number): Symbol[]
    {
      this.top -= count;
      return this.stack.slice(this.top + 1, this.top + 1 + count);
    }
  }

// End
